from datetime import datetime
from dateutil.relativedelta import relativedelta
import pymorphy2
from aiogram import types
from aiogram.dispatcher import filters, FSMContext
from aiogram.dispatcher.filters.builtin import Command

from loader import dp
from states import year


@dp.message_handler(Command("detect_years"), state="*")
async def start_detect_years(message: types.Message, state: FSMContext):
    await state.finish()
    await year.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: 03.09.1994", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(filters.Regexp(r'^(0?[1-9]|[12][0-9]|3[01]).(0?[1-9]|1[012]).((17|18|19|20)\d\d)$'), state=year)
async def detect_years(message: types.Message, state: FSMContext):
    birthday_date = datetime(
        day=int(message.text.split(".")[0]),
        month=int(message.text.split(".")[1]),
        year=int(message.text.split(".")[2])
    )

    time_now = datetime.now()
    since_the_birthday = relativedelta(time_now, birthday_date)
    if time_now.month > birthday_date.month:
        next_birthday_date = birthday_date.replace(year=time_now.year + 1)
    else:
        next_birthday_date = birthday_date.replace(year=time_now.year)

    if birthday_date.month <= time_now.month:
        if birthday_date.day >= time_now.day:
            pass
        else:
            next_birthday_date = birthday_date.replace(year=time_now.year + 1)

    time_to_next_birthday = relativedelta(next_birthday_date, time_now)

    def morph(word, number):
        word = pymorphy2.MorphAnalyzer().parse(word)[0].make_agree_with_number(number).word
        if word == '–≥–æ–¥–æ–≤'.lower():
            word = '–ª–µ—Ç'
        return word

    def week():
        weeks = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: "–°—Ä–µ–¥—É", 3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü—É", 5: "–°—É–±–±–æ—Ç—É", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}

        week = birthday_date.replace(year=time_now.year).weekday()
        if since_the_birthday.hours != 0 or since_the_birthday.minutes != 0:
            if week == 6:
                week = 0
            else:
                week += 1
        return weeks[week]

    def month():
        months = {1: '–Ø–Ω–≤–∞—Ä—è', 2: '–§–µ–≤—Ä–∞–ª—è', 3: '–ú–∞—Ä—Ç–∞', 4: '–ê–ø—Ä–µ–ª—è', 5: '–ú–∞—è', 6: '–ò—é–Ω—è', 7: "–ò—é–ª—è",
                  8: '–ê–≤–≥—É—Å—Ç–∞', 9: "–°–µ–Ω—Ç—è–±—Ä—è", 10: "–û–∫—Ç—è–±—Ä—è", 11: "–ù–æ—è–±—Ä—è", 12: "–î–µ–∫–∞–±—Ä—è"}

        return months[birthday_date.month]

    result = f"–í–æ–∑—Ä–∞—Å—Ç<b>: {since_the_birthday.years} {morph('–≥–æ–¥', since_the_birthday.years)}, " \
             f"{since_the_birthday.months} {morph('–º–µ—Å—è—Ü', since_the_birthday.months)}, " \
             f"{since_the_birthday.days} {morph('–¥–µ–Ω—å', since_the_birthday.days)}</b>\n" \
             f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è:<b> {time_to_next_birthday.months} {morph('–º–µ—Å—è—Ü', time_to_next_birthday.months)}, " \
             f" {time_to_next_birthday.days} {morph('–¥–µ–Ω—å', time_to_next_birthday.days)}, " \
             f" {time_to_next_birthday.hours} {morph('—á–∞—Å', time_to_next_birthday.hours)}</b> \n" \
             f"üéâ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è <b>{birthday_date.day} {month()} –≤ {week()}</b>"

    await message.answer(result)
    await state.finish()
    await state.set_state(year)
